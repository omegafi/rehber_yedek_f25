import 'dart:io';
import 'package:flutter/material.dart';
import 'package:flutter/foundation.dart' show kIsWeb;
import 'package:flutter/services.dart'; // Clipboard için
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:url_launcher/url_launcher.dart';
import '../models/contact_format.dart';
import '../services/contacts_service.dart';
import '../services/file_sharing_service.dart';
import '../theme/app_theme.dart';
import '../widgets/contact_list_item.dart';
import '../main.dart'; // Provider'lar için
import '../utils/app_localizations.dart'; // Lokalizasyon için
import 'export_screen.dart';
import 'import_screen.dart';
import 'settings_screen.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:intl/intl.dart';
import 'package:flutter_contacts/flutter_contacts.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:flutter_share/flutter_share.dart';
// import 'package:flutter_native_timezone/flutter_native_timezone.dart'; // Geçici olarak devre dışı bırakıldı

// Rehber izin durumu sağlayıcısı - main.dart'tan geliyor
import '../main.dart' show contactsPermissionProvider;

// Rehber sayısı sağlayıcısı
final contactsCountProvider = FutureProvider<int>((ref) async {
  // İzin durumunu kontrol et
  final permissionStatus = ref.watch(contactsPermissionProvider);

  if (permissionStatus != PermissionStatus.granted) {
    return 0; // İzin yoksa 0 döndür
  }

  final contactsManager = ContactsManager();
  final contacts = await contactsManager.getAllContacts();
  return contacts.length;
});

// Kişiler listesi sağlayıcısı
final contactsListProvider = FutureProvider<List<Contact>>((ref) async {
  // İzin durumunu kontrol et
  final permissionStatus = ref.watch(contactsPermissionProvider);

  if (permissionStatus != PermissionStatus.granted) {
    return []; // İzin yoksa boş liste döndür
  }

  final contactsManager = ContactsManager();
  final contacts = await contactsManager.getAllContacts();
  return contacts;
});

// Son yedekleme tarihi sağlayıcısı (örnek)
final lastBackupDateProvider = StateProvider<DateTime?>((ref) => null);

// Seçili kişiler sağlayıcısı
final selectedContactsProvider = StateProvider<Set<String>>((ref) => {});

// Tüm kişilerin seçili olup olmadığını kontrol eden sağlayıcı
final allContactsSelectedProvider = StateProvider<bool>((ref) => false);

// Filtrelenmiş kişi sayısı sağlayıcısı
final filteredContactsCountProvider = FutureProvider<int>((ref) async {
  // İzin durumunu kontrol et
  final permissionStatus = ref.watch(contactsPermissionProvider);

  if (permissionStatus != PermissionStatus.granted) {
    return 0; // İzin yoksa 0 döndür
  }

  // Filtreleme ayarlarını al
  final includeContactsWithoutNumber =
      ref.watch(includeContactsWithoutNumberProvider);
  final includeNumbersWithoutName =
      ref.watch(includeNumbersWithoutNameProvider);

  final contactsManager = ContactsManager();
  final contacts = await contactsManager.getAllContacts();

  // Filtreleme uygula
  final filteredContacts = contacts.where((contact) {
    // Numarası olmayan kişileri filtrele
    if (!includeContactsWithoutNumber && contact.phones.isEmpty) {
      return false;
    }

    // İsmi olmayan numaraları filtrele
    if (!includeNumbersWithoutName &&
        contact.name.first.isEmpty &&
        contact.name.last.isEmpty) {
      return false;
    }

    return true;
  }).toList();

  return filteredContacts.length;
});

// Tekrar eden kişileri tespit eden sağlayıcı
final duplicateContactsProvider =
    FutureProvider<List<List<Contact>>>((ref) async {
  final permissionStatus = ref.watch(contactsPermissionProvider);

  if (permissionStatus != PermissionStatus.granted) {
    return []; // İzin yoksa boş liste döndür
  }

  final contactsManager = ContactsManager();
  final contacts = await contactsManager.getAllContacts();

  // Aynı isme sahip kişileri grupla
  final Map<String, List<Contact>> nameGroups = {};

  for (final contact in contacts) {
    final name =
        '${contact.name.first} ${contact.name.last}'.trim().toLowerCase();
    if (name.isNotEmpty) {
      nameGroups.putIfAbsent(name, () => []).add(contact);
    }
  }

  // Sadece birden fazla kişi içeren grupları al
  return nameGroups.values.where((group) => group.length > 1).toList();
});

// Tekrar eden numaraları tespit eden sağlayıcı
final duplicateNumbersProvider =
    FutureProvider<List<List<Contact>>>((ref) async {
  final permissionStatus = ref.watch(contactsPermissionProvider);

  if (permissionStatus != PermissionStatus.granted) {
    return []; // İzin yoksa boş liste döndür
  }

  final contactsManager = ContactsManager();
  final contacts = await contactsManager.getAllContacts();

  // Aynı telefon numarasına sahip kişileri grupla
  final Map<String, List<Contact>> numberGroups = {};

  for (final contact in contacts) {
    for (final phone in contact.phones) {
      // Numarayı normalize et (sadece rakamlar kalsın)
      final normalizedNumber = phone.number.replaceAll(RegExp(r'\D'), '');
      if (normalizedNumber.isNotEmpty) {
        numberGroups.putIfAbsent(normalizedNumber, () => []).add(contact);
      }
    }
  }

  // Sadece birden fazla kişi içeren grupları al
  return numberGroups.values.where((group) => group.length > 1).toList();
});

// Tekrar eden kişilerin birleştirilmesi için seçili kişiler
final selectedDuplicatesProvider = StateProvider<Set<String>>((ref) => {});

// Tekrarlayan telefon numaralı kişiler sağlayıcısı
final duplicateNumbersPhoneProvider =
    FutureProvider<List<Contact>>((ref) async {
  final contactsList = await ref.watch(contactsListProvider.future);

  // Telefon numaralarına göre kişileri grupla
  final phoneMap = <String, List<Contact>>{};

  for (final contact in contactsList) {
    for (final phone in contact.phones) {
      final normalizedNumber = _normalizePhoneNumber(phone.number);
      if (!phoneMap.containsKey(normalizedNumber)) {
        phoneMap[normalizedNumber] = [];
      }
      phoneMap[normalizedNumber]!.add(contact);
    }
  }

  // Birden fazla kişiye ait olan numaraları bul
  final duplicateContacts = <Contact>{};
  phoneMap.forEach((number, contacts) {
    if (contacts.length > 1) {
      duplicateContacts.addAll(contacts);
    }
  });

  return duplicateContacts.toList();
});

// Tekrarlayan isimlere sahip kişiler sağlayıcısı
final duplicateNamesProvider = FutureProvider<List<Contact>>((ref) async {
  final contactsList = await ref.watch(contactsListProvider.future);

  // İsimlere göre kişileri grupla
  final namesMap = <String, List<Contact>>{};

  for (final contact in contactsList) {
    if (contact.displayName.isNotEmpty) {
      final normalizedName = contact.displayName.toLowerCase().trim();
      if (!namesMap.containsKey(normalizedName)) {
        namesMap[normalizedName] = [];
      }
      namesMap[normalizedName]!.add(contact);
    }
  }

  // Birden fazla kişiye ait olan isimleri bul
  final duplicateContacts = <Contact>{};
  namesMap.forEach((name, contacts) {
    if (contacts.length > 1) {
      duplicateContacts.addAll(contacts);
    }
  });

  return duplicateContacts.toList();
});

// Tekrarlayan e-postalara sahip kişiler sağlayıcısı
final duplicateEmailsProvider = FutureProvider<List<Contact>>((ref) async {
  final contactsList = await ref.watch(contactsListProvider.future);

  // E-posta adreslerine göre kişileri grupla
  final emailMap = <String, List<Contact>>{};

  for (final contact in contactsList) {
    for (final email in contact.emails) {
      final normalizedEmail = email.address.toLowerCase().trim();
      if (!emailMap.containsKey(normalizedEmail)) {
        emailMap[normalizedEmail] = [];
      }
      emailMap[normalizedEmail]!.add(contact);
    }
  }

  // Birden fazla kişiye ait olan e-postaları bul
  final duplicateContacts = <Contact>{};
  emailMap.forEach((email, contacts) {
    if (contacts.length > 1) {
      duplicateContacts.addAll(contacts);
    }
  });

  return duplicateContacts.toList();
});

// Eksik bilgiye sahip kişiler sağlayıcısı
final missingInfoContactsProvider = FutureProvider<List<Contact>>((ref) async {
  final contactsList = await ref.watch(contactsListProvider.future);

  // Eksik bilgiye sahip kişileri filtrele
  final missingInfoContacts = contactsList
      .where((contact) =>
              contact.displayName.isEmpty || // İsim yok
              (contact.phones.isEmpty &&
                  contact.emails.isEmpty) // Ne telefon ne email var
          )
      .toList();

  return missingInfoContacts;
});

// Telefon numarasını normalleştirme yardımcı fonksiyonu
String _normalizePhoneNumber(String phoneNumber) {
  // Sadece rakamları tut
  final digitsOnly = phoneNumber.replaceAll(RegExp(r'[^\d+]'), '');
  // + işaretini koru ama başta değilse kaldır
  final normalizedNumber =
      digitsOnly.startsWith('+') ? digitsOnly : digitsOnly.replaceAll('+', '');
  return normalizedNumber;
}

// Rehber sayma animasyonu için durum sağlayıcıları
final countingStartedProvider = StateProvider<bool>((ref) => false);
final animationCompletedProvider = StateProvider<bool>((ref) => false);

class HomeScreen extends ConsumerStatefulWidget {
  const HomeScreen({Key? key}) : super(key: key);

  @override
  ConsumerState<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends ConsumerState<HomeScreen> {
  // Seçili sekme indeksi
  int _selectedIndex = 0;

  // Arama metni
  final TextEditingController _searchController = TextEditingController();
  String _searchQuery = '';

  // Sekme değiştiğinde çağrılacak metod
  void _onItemTapped(int index) {
    if (index == 2) {
      // Ayarlar sekmesi
      Navigator.pushNamed(context, '/settings');
    } else {
      setState(() {
        _selectedIndex = index;
      });
    }
  }

  @override
  void initState() {
    super.initState();

    // Uygulama başladığında izin kontrolü
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _checkAndRequestPermissionIfNeeded();
      _loadFilterSettings(); // Filtreleme ayarlarını yükle
    });

    // Arama kontrolü
    _searchController.addListener(() {
      setState(() {
        _searchQuery = _searchController.text.toLowerCase();
      });
    });
  }

  @override
  void dispose() {
    _searchController.dispose();
    super.dispose();
  }

  // İzin kontrolü ve gerekirse izin isteme
  Future<void> _checkAndRequestPermissionIfNeeded() async {
    // Mobil olmayan platformlarda (masaüstü, web) izin kontrolünü atla
    if (kIsWeb || !(Platform.isAndroid || Platform.isIOS)) {
      debugPrint('İzin kontrolü: Mobil olmayan platform - izin gerekmiyor');
      return;
    }

    final currentStatus = ref.read(contactsPermissionProvider);

    // Debug için izin durumunu yazdır
    debugPrint('Başlangıçta rehber izin durumu: $currentStatus');

    // Android'de özellikle izin isteği için
    if (Platform.isAndroid) {
      // Uygulamayı rehbere erişim isteyen uygulamalar listesinde göstermek için
      // Her durumda izin isteme prosedürünü başlat
      if (currentStatus != PermissionStatus.granted) {
        final status = await Permission.contacts.request();
        ref.read(contactsPermissionProvider.notifier).state = status;
        debugPrint('Android izin isteme sonucu: $status');

        // Eğer kullanıcı reddetmişse, önemi hakkında bilgi ver
        if (status == PermissionStatus.denied ||
            status == PermissionStatus.permanentlyDenied) {
          if (mounted) {
            _showPermissionError();
          }
        }
      }
    }
    // iOS için normal akış
    else if (currentStatus == PermissionStatus.denied) {
      // İzin iste
      final status = await Permission.contacts.request();
      ref.read(contactsPermissionProvider.notifier).state = status;
      debugPrint('İzin kontrolü: Mevcut durum = $status');
    }
  }

  // İzin isteme fonksiyonu
  Future<void> _requestPermission() async {
    // Mobil olmayan platformlarda (masaüstü, web) izin kontrolünü atla
    if (kIsWeb || !(Platform.isAndroid || Platform.isIOS)) {
      debugPrint('İzin isteme: Mobil olmayan platform - izin gerekmiyor');
      ref.read(contactsPermissionProvider.notifier).state =
          PermissionStatus.granted;
      return;
    }

    // Mevcut izin durumunu kontrol et
    final currentStatus = ref.read(contactsPermissionProvider);

    if (currentStatus == PermissionStatus.permanentlyDenied) {
      // Eğer izin kalıcı olarak reddedildiyse, kullanıcıyı ayarlara yönlendir
      await openAppSettings();
    } else {
      // Değilse, izin istemeyi dene
      final status = await Permission.contacts.request();
      ref.read(contactsPermissionProvider.notifier).state = status;

      // Sonucu yazdır
      debugPrint('İzin isteme sonucu: $status');
    }
  }

  void _showPermissionError() {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: const Text(
          'Kişilere erişim izni olmadan uygulama çalışamaz. '
          'Lütfen izin verin veya Ayarlar > Uygulamalar > Rehber Yedekleme > İzinler kısmından izin ayarlayın',
        ),
        duration: const Duration(seconds: 5),
        backgroundColor: AppTheme.errorColor,
        behavior: SnackBarBehavior.floating,
        action: SnackBarAction(
          label: 'ANLADIM',
          textColor: Colors.white,
          onPressed: () {
            ScaffoldMessenger.of(context).hideCurrentSnackBar();
          },
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    // Tema modunu izle
    final themeMode = ref.watch(themeProvider);
    final isDarkMode = themeMode == ThemeMode.dark;

    // Tema renkleri
    final backgroundColor = isDarkMode
        ? AppTheme.darkBackgroundColor
        : AppTheme.lightBackgroundColor;
    final surfaceColor =
        isDarkMode ? AppTheme.darkSurfaceColor : AppTheme.lightSurfaceColor;
    final cardColor =
        isDarkMode ? AppTheme.darkCardColor : AppTheme.lightCardColor;
    final textColor =
        isDarkMode ? AppTheme.darkTextColor : AppTheme.lightTextColor;
    final textSecondaryColor = isDarkMode
        ? AppTheme.darkTextSecondaryColor
        : AppTheme.lightTextSecondaryColor;

    // İzin durumunu izle
    final permissionStatus = ref.watch(contactsPermissionProvider);

    // Arka plan gradyanı
    final backgroundGradient = LinearGradient(
      begin: Alignment.topCenter,
      end: Alignment.bottomCenter,
      colors: [
        backgroundColor,
        surfaceColor,
      ],
    );

    // Filtreleme ayarlarını izle
    final includeContactsWithoutNumber =
        ref.watch(includeContactsWithoutNumberProvider);
    final includeNumbersWithoutName =
        ref.watch(includeNumbersWithoutNameProvider);

    return Scaffold(
      backgroundColor: backgroundColor,
      appBar: AppBar(
        title: Text(
          _selectedIndex == 0 ? context.l10n.home_screen_title : 'Kişilerim',
          style: TextStyle(color: isDarkMode ? Colors.white : Colors.black),
        ),
        backgroundColor: backgroundColor,
        elevation: 0,
        actions: _selectedIndex == 1
            ? [
                // Kişiler ekranında seçim işlemleri için butonlar
                IconButton(
                  icon: const Icon(Icons.select_all),
                  onPressed: () {
                    final allSelected = ref.read(allContactsSelectedProvider);
                    ref.read(allContactsSelectedProvider.notifier).state =
                        !allSelected;

                    if (!allSelected) {
                      // Tüm kişileri seç
                      final contacts =
                          ref.read(contactsListProvider).value ?? [];
                      final selectedIds = contacts.map((c) => c.id).toSet();
                      ref.read(selectedContactsProvider.notifier).state =
                          selectedIds;
                    } else {
                      // Tüm seçimleri kaldır
                      ref.read(selectedContactsProvider.notifier).state = {};
                    }
                  },
                ),
                if (ref.watch(selectedContactsProvider).isNotEmpty)
                  IconButton(
                    icon: const Icon(Icons.backup),
                    onPressed: () {
                      // Seçili kişileri yedekle
                      final selectedIds = ref.read(selectedContactsProvider);
                      Navigator.pushNamed(
                        context,
                        '/export',
                        arguments: {'selectedContactIds': selectedIds},
                      );
                    },
                  ),
              ]
            : null,
      ),
      body: Container(
        decoration: BoxDecoration(gradient: backgroundGradient),
        child: permissionStatus == PermissionStatus.granted
            ? _selectedIndex == 0
                ? _buildHomeScreen(isDarkMode, textColor, cardColor)
                : _buildContactsScreen(
                    isDarkMode, textColor, cardColor, textSecondaryColor)
            : _buildPermissionRequest(isDarkMode, textColor, cardColor),
      ),
      bottomNavigationBar: _buildBottomNavigationBar(isDarkMode),
    );
  }

  Widget _buildPermissionRequest(
      bool isDarkMode, Color textColor, Color cardColor) {
    return Center(
      child: Padding(
        padding: const EdgeInsets.all(24.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.contacts_outlined,
              size: 64,
              color: textColor.withOpacity(0.5),
            ),
            const SizedBox(height: 24),
            Text(
              context.l10n.contacts_permission_message,
              textAlign: TextAlign.center,
              style: TextStyle(
                color: textColor,
                fontSize: 16,
              ),
            ),
            const SizedBox(height: 24),
            ElevatedButton.icon(
              onPressed: _requestPermission,
              icon: const Icon(Icons.security),
              label: Text(context.l10n.grant_permission),
              style: ElevatedButton.styleFrom(
                backgroundColor: AppTheme.primaryColor,
                foregroundColor: Colors.white,
                padding: const EdgeInsets.symmetric(
                  horizontal: 24,
                  vertical: 12,
                ),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(8),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildHomeScreen(bool isDarkMode, Color textColor, Color cardColor) {
    // Kişi sayısı asenkron sağlayıcısı
    final contactsCountAsync = ref.watch(contactsCountProvider);

    // Kişilerin yüklendiğini ve sayma animasyonunu kontrol eden state
    final countingStarted = ref.watch(countingStartedProvider);
    final animationCompleted = ref.watch(animationCompletedProvider);

    // Duplicate contacts sağlayıcıları
    final duplicateNumbersAsync = ref.watch(duplicateNumbersProvider);
    final duplicateEmailsAsync = ref.watch(duplicateEmailsProvider);
    final duplicateNamesAsync = ref.watch(duplicateNamesProvider);

    // Eksik bilgileri olan kişiler sağlayıcısı
    final missingInfoContactsAsync = ref.watch(missingInfoContactsProvider);

    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.stretch,
        children: [
          // 3D Progress Circle ve Toplam Kişi Sayısı
          contactsCountAsync.when(
            data: (totalCount) {
              return Column(
                children: [
                  SizedBox(
                    height: 220, // Circle büyüklüğü küçültüldü
                    child: Stack(
                      alignment: Alignment.center,
                      children: [
                        // 3D görünüm için gölge katmanı
                        Container(
                          width: 220,
                          height: 220,
                          decoration: BoxDecoration(
                            shape: BoxShape.circle,
                            gradient: RadialGradient(
                              colors: [
                                Colors.transparent,
                                Colors.black.withOpacity(0.12),
                              ],
                              stops: const [0.85, 1.0],
                            ),
                          ),
                        ),
                        
                        // İlerleme çemberi
                        Container(
                          width: 210,
                          height: 210,
                          decoration: BoxDecoration(
                            shape: BoxShape.circle,
                            boxShadow: [
                              BoxShadow(
                                color: Colors.black.withOpacity(0.15),
                                blurRadius: 10,
                                offset: const Offset(0, 4),
                              ),
                            ],
                          ),
                          child: AnimatedBuilder(
                            animation: countingStarted
                                ? AlwaysStoppedAnimation(1.0)
                                : AlwaysStoppedAnimation(0.0),
                            builder: (context, child) {
                              return TweenAnimationBuilder<double>(
                                tween: Tween<double>(
                                    begin: 0.0,
                                    end: countingStarted ? 1.0 : 0.0),
                                duration: const Duration(milliseconds: 1500),
                                curve: Curves.easeInOut,
                                onEnd: () {
                                  if (countingStarted) {
                                    ref
                                        .read(
                                            animationCompletedProvider.notifier)
                                        .state = true;
                                  }
                                },
                                builder: (context, value, child) {
                                  return ShaderMask(
                                    shaderCallback: (Rect bounds) {
                                      return SweepGradient(
                                        startAngle: 0,
                                        endAngle: 2 * 3.14,
                                        colors: [
                                          AppTheme.primaryColor,
                                          AppTheme.primaryColor.withOpacity(0.8),
                                          AppTheme.primaryColor,
                                        ],
                                        stops: const [0.0, 0.5, 1.0],
                                        transform: GradientRotation(3.14 / 2),
                                      ).createShader(bounds);
                                    },
                                    child: Container(
                                      decoration: BoxDecoration(
                                        shape: BoxShape.circle,
                                        color: Colors.white,
                                      ),
                                      child: CircularProgressIndicator(
                                        value: value,
                                        strokeWidth: 15,
                                        backgroundColor: Colors.grey.withOpacity(0.15),
                                        valueColor: AlwaysStoppedAnimation<Color>(
                                            Colors.white),
                                      ),
                                    ),
                                  );
                                },
                              );
                            },
                          ),
                        ),

                        // İçerik - Buton veya sayaç
                        countingStarted
                            ? Column(
                                mainAxisSize: MainAxisSize.min,
                                children: [
                                  // 3D efekti için hafif gölge
                                  Container(
                                    decoration: BoxDecoration(
                                      boxShadow: [
                                        BoxShadow(
                                          color: Colors.black.withOpacity(0.1),
                                          blurRadius: 5,
                                          offset: const Offset(0, 2),
                                        ),
                                      ],
                                    ),
                                    child: TweenAnimationBuilder<int>(
                                      tween: IntTween(begin: 0, end: totalCount),
                                      duration:
                                          const Duration(milliseconds: 1200),
                                      builder: (context, value, child) {
                                        return Text(
                                          value.toString(),
                                          style: TextStyle(
                                            fontSize: 56,
                                            fontWeight: FontWeight.bold,
                                            color: isDarkMode
                                                ? Colors.white
                                                : Colors.black,
                                            shadows: [
                                              Shadow(
                                                color: Colors.black.withOpacity(0.15),
                                                blurRadius: 1,
                                                offset: const Offset(0, 1),
                                              ),
                                            ],
                                          ),
                                        );
                                      },
                                    ),
                                  ),
                                  
                                  Row(
                                    mainAxisSize: MainAxisSize.min,
                                    children: [
                                      Icon(Icons.people, 
                                        size: 16, 
                                        color: isDarkMode
                                            ? Colors.white70
                                            : Colors.black54
                                      ),
                                      SizedBox(width: 4),
                                      Text(
                                        "Kişi",
                                        style: TextStyle(
                                          fontSize: 18,
                                          color: isDarkMode
                                              ? Colors.white70
                                              : Colors.black54,
                                        ),
                                      ),
                                    ],
                                  ),
                                ],
                              )
                            : Material(
                                color: Colors.transparent,
                                child: InkWell(
                                  customBorder: CircleBorder(),
                                  onTap: () {
                                    ref
                                        .read(countingStartedProvider.notifier)
                                        .state = true;
                                  },
                                  child: Container(
                                    width: 140,
                                    height: 140,
                                    decoration: BoxDecoration(
                                      shape: BoxShape.circle,
                                      color: AppTheme.primaryColor.withOpacity(0.1),
                                      boxShadow: [
                                        BoxShadow(
                                          color: AppTheme.primaryColor.withOpacity(0.1),
                                          blurRadius: 10,
                                          spreadRadius: 1,
                                        ),
                                      ],
                                    ),
                                    child: Column(
                                      mainAxisAlignment: MainAxisAlignment.center,
                                      children: [
                                        ShaderMask(
                                          shaderCallback: (bounds) => LinearGradient(
                                            colors: [
                                              AppTheme.primaryColor,
                                              AppTheme.primaryColor.withBlue(255),
                                            ],
                                            begin: Alignment.topLeft,
                                            end: Alignment.bottomRight,
                                          ).createShader(bounds),
                                          child: Icon(
                                            Icons.cloud_sync_rounded,
                                            size: 48,
                                            color: Colors.white,
                                          ),
                                        ),
                                        SizedBox(height: 8),
                                        Text(
                                          "Rehberi Tara",
                                          textAlign: TextAlign.center,
                                          style: TextStyle(
                                            fontSize: 16,
                                            fontWeight: FontWeight.bold,
                                            color: AppTheme.primaryColor,
                                          ),
                                        ),
                                      ],
                                    ),
                                  ),
                                ),
                              ),
                    ],
                  ),
                ),

                const SizedBox(height: 16),

                // Yedekleme metin ve buton
                if (animationCompleted)
                  Column(
                    children: [
                      Text(
                        "Kişileriniz yedeklemeye hazır!",
                        textAlign: TextAlign.center,
                        style: TextStyle(
                          fontSize: 22,
                          fontWeight: FontWeight.bold,
                          color: isDarkMode ? Colors.white : Colors.black,
                        ),
                      ),
                      
                      Padding(
                        padding: const EdgeInsets.only(top: 12.0, bottom: 20.0),
                        child: ElevatedButton.icon(
                          onPressed: () {
                            Navigator.pushNamed(context, '/export');
                          },
                          icon: Icon(Icons.cloud_upload_rounded),
                          label: Text("Kişileri Yedekle"),
                          style: ElevatedButton.styleFrom(
                            backgroundColor: AppTheme.primaryColor,
                            foregroundColor: Colors.white,
                            padding: EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(12),
                            ),
                            elevation: 3,
                            shadowColor: AppTheme.primaryColor.withOpacity(0.3),
                          ),
                        ),
                      ),
                    ],
                  )
                else
                  Padding(
                    padding: const EdgeInsets.only(bottom: 20.0),
                    child: Text(
                      countingStarted 
                        ? "Kişileriniz taranıyor..."
                        : "Rehberinizi yedeklemek için tıklayın",
                      textAlign: TextAlign.center,
                      style: TextStyle(
                        fontSize: 20,
                        color: isDarkMode ? Colors.white70 : Colors.black87,
                      ),
                    ),
                  ),

                // Yeniden düzenlenmiş kartlar - üst satırda tek kart
                _buildStatCard(
                  isDarkMode: isDarkMode,
                  title: "Tekrarlanan Numaralar",
                  valueAsync: duplicateNumbersAsync,
                  icon: Icons.phone_android,
                  isFullWidth: true,
                ),
                
                SizedBox(height: 16),
                
                // Alt satırda üç kart yan yana
                Row(
                  children: [
                    // Tekrarlanan E-postalar
                    Expanded(
                      child: _buildStatCard(
                        isDarkMode: isDarkMode,
                        title: "Tekrarlanan\nE-postalar",
                        valueAsync: duplicateEmailsAsync,
                        icon: Icons.email,
                        isFullWidth: false,
                      ),
                    ),
                    
                    SizedBox(width: 12),
                    
                    // Tekrarlanan İsimler
                    Expanded(
                      child: _buildStatCard(
                        isDarkMode: isDarkMode,
                        title: "Tekrarlanan\nİsimler",
                        valueAsync: duplicateNamesAsync,
                        icon: Icons.person,
                        isFullWidth: false,
                      ),
                    ),
                    
                    SizedBox(width: 12),
                    
                    // Eksik Bilgiye Sahip Kişiler
                    Expanded(
                      child: _buildStatCard(
                        isDarkMode: isDarkMode,
                        title: "Eksik\nBilgiler",
                        valueAsync: missingInfoContactsAsync,
                        icon: Icons.info_outline,
                        isFullWidth: false,
                      ),
                    ),
                  ],
                ),
              ],
            );
          },
          loading: () => Center(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                SizedBox(
                  height: 220,
                  child: Stack(
                    alignment: Alignment.center,
                    children: [
                      // 3D gölge efekti
                      Container(
                        width: 220,
                        height: 220,
                        decoration: BoxDecoration(
                          shape: BoxShape.circle,
                          gradient: RadialGradient(
                            colors: [
                              Colors.transparent,
                              Colors.black.withOpacity(0.12),
                            ],
                            stops: const [0.85, 1.0],
                          ),
                        ),
                      ),
                      
                      // İlerleme çemberi
                      Container(
                        width: 210,
                        height: 210,
                        decoration: BoxDecoration(
                          shape: BoxShape.circle,
                          boxShadow: [
                            BoxShadow(
                              color: Colors.black.withOpacity(0.15),
                              blurRadius: 10,
                              offset: const Offset(0, 4),
                            ),
                          ],
                        ),
                        child: ShaderMask(
                          shaderCallback: (Rect bounds) {
                            return SweepGradient(
                              startAngle: 0,
                              endAngle: 2 * 3.14,
                              colors: [
                                AppTheme.primaryColor,
                                AppTheme.primaryColor.withOpacity(0.8),
                                AppTheme.primaryColor,
                              ],
                              stops: const [0.0, 0.5, 1.0],
                              transform: GradientRotation(3.14 / 2),
                            ).createShader(bounds);
                          },
                          child: Container(
                            decoration: BoxDecoration(
                              shape: BoxShape.circle,
                              color: Colors.white,
                            ),
                            child: CircularProgressIndicator(
                              value: null, // Belirsiz ilerleme
                              strokeWidth: 15,
                              backgroundColor: Colors.grey.withOpacity(0.15),
                              valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                            ),
                          ),
                        ),
                      ),
                      
                      Column(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          Container(
                            decoration: BoxDecoration(
                              boxShadow: [
                                BoxShadow(
                                  color: Colors.black.withOpacity(0.1),
                                  blurRadius: 5,
                                  offset: const Offset(0, 2),
                                ),
                              ],
                            ),
                            child: Text(
                              "...",
                              style: TextStyle(
                                fontSize: 40,
                                fontWeight: FontWeight.bold,
                                color: isDarkMode ? Colors.white : Colors.black,
                              ),
                            ),
                          ),
                          
                          Row(
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              Icon(Icons.sync, 
                                size: 16, 
                                color: isDarkMode
                                    ? Colors.white70
                                    : Colors.black54
                              ),
                              SizedBox(width: 4),
                              Text(
                                "Yükleniyor",
                                style: TextStyle(
                                  fontSize: 18,
                                  color: isDarkMode
                                      ? Colors.white70
                                      : Colors.black54,
                                ),
                              ),
                            ],
                          ),
                        ],
                      ),
                    ],
                  ),
                ),

                const SizedBox(height: 16),

                Text(
                  "Rehberiniz yükleniyor, lütfen bekleyin...",
                  textAlign: TextAlign.center,
                  style: TextStyle(
                    fontSize: 20,
                    color: isDarkMode ? Colors.white70 : Colors.black87,
                  ),
                ),

                const SizedBox(height: 30),

                // Placeholder kartlar
                _buildDummyCard(
                  isDarkMode: isDarkMode,
                  title: "Tekrarlanan Numaralar",
                  isFullWidth: true,
                ),
                
                SizedBox(height: 16),
                
                Row(
                  children: [
                    Expanded(
                      child: _buildDummyCard(
                        isDarkMode: isDarkMode,
                        title: "Tekrarlanan\nE-postalar",
                        isFullWidth: false,
                      ),
                    ),
                    
                    SizedBox(width: 12),
                    
                    Expanded(
                      child: _buildDummyCard(
                        isDarkMode: isDarkMode,
                        title: "Tekrarlanan\nİsimler",
                        isFullWidth: false,
                      ),
                    ),
                    
                    SizedBox(width: 12),
                    
                    Expanded(
                      child: _buildDummyCard(
                        isDarkMode: isDarkMode,
                        title: "Eksik\nBilgiler",
                        isFullWidth: false,
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
          error: (error, stack) => Center(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                Icon(
                  Icons.error_outline,
                  color: Colors.red,
                  size: 56,
                ),
                SizedBox(height: 16),
                Text(
                  'Hata: $error',
                  style: TextStyle(color: Colors.red),
                  textAlign: TextAlign.center,
                ),
                SizedBox(height: 16),
                ElevatedButton(
                  onPressed: () {
                    ref.refresh(contactsCountProvider);
                  },
                  child: Text("Yeniden Dene"),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: AppTheme.primaryColor,
                    foregroundColor: Colors.white,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  // Değer gösteren kart widget'ı - yeni tam genişlik desteği eklenmiş
  Widget _buildStatCard({
    required bool isDarkMode,
    required String title,
    required AsyncValue<List<dynamic>> valueAsync,
    required IconData icon,
    required bool isFullWidth,
  }) {
    return Card(
      elevation: 2,
      color: AppTheme.primaryColor,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(16),
      ),
      child: InkWell(
        onTap: () {
          // İlgili kişileri göster
          if (title.contains("Tekrarlanan Numaralar")) {
            _showDuplicateNumbersDialog(context, isDarkMode);
          } else if (title.contains("Tekrarlanan İsimler")) {
            _showDuplicateNamesDialog(context, isDarkMode);
          } else if (title.contains("Tekrarlanan E-postalar")) {
            _showDuplicateEmailsDialog(context, isDarkMode);
          } else if (title.contains("Eksik")) {
            _showMissingInfoDialog(context, isDarkMode);
          }
        },
        borderRadius: BorderRadius.circular(16),
        child: Padding(
          padding: isFullWidth 
            ? const EdgeInsets.symmetric(horizontal: 20, vertical: 16)
            : const EdgeInsets.symmetric(horizontal: 12, vertical: 12),
          child: isFullWidth
              // Geniş kart için yatay düzen
              ? Row(
                  children: [
                    // İkon kısmı
                    Container(
                      padding: const EdgeInsets.all(12),
                      decoration: BoxDecoration(
                        color: Colors.white.withOpacity(0.2),
                        shape: BoxShape.circle,
                      ),
                      child: Icon(
                        icon,
                        color: Colors.white,
                        size: 28,
                      ),
                    ),
                    
                    SizedBox(width: 16),
                    
                    // Metin ve değer kısmı
                    Expanded(
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Text(
                            title,
                            style: TextStyle(
                              fontSize: 18,
                              fontWeight: FontWeight.w500,
                              color: Colors.white,
                            ),
                          ),
                          
                          valueAsync.when(
                            data: (data) => Row(
                              children: [
                                Text(
                                  data.length.toString(),
                                  style: TextStyle(
                                    fontSize: 32,
                                    fontWeight: FontWeight.bold,
                                    color: Colors.white,
                                  ),
                                ),
                                
                                SizedBox(width: 8),
                                
                                Icon(
                                  Icons.arrow_forward_ios,
                                  color: Colors.white,
                                  size: 16,
                                ),
                              ],
                            ),
                            loading: () => SizedBox(
                              width: 24,
                              height: 24,
                              child: CircularProgressIndicator(
                                valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                                strokeWidth: 2.5,
                              ),
                            ),
                            error: (error, stack) => Icon(
                              Icons.error_outline,
                              color: Colors.white,
                              size: 28,
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                )
              // Dar kart için dikey düzen  
              : Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: [
                    // Değer kısmı
                    valueAsync.when(
                      data: (data) => Text(
                        data.length.toString(),
                        style: TextStyle(
                          fontSize: 28,
                          fontWeight: FontWeight.bold,
                          color: Colors.white,
                        ),
                      ),
                      loading: () => SizedBox(
                        width: 24,
                        height: 24,
                        child: CircularProgressIndicator(
                          valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                          strokeWidth: 2.5,
                        ),
                      ),
                      error: (error, stack) => Icon(
                        Icons.error_outline,
                        color: Colors.white,
                        size: 28,
                      ),
                    ),
                    
                    SizedBox(height: 8),
                    
                    // Başlık
                    Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Icon(
                          icon,
                          color: Colors.white,
                          size: 14,
                        ),
                        SizedBox(width: 4),
                        Flexible(
                          child: Text(
                            title,
                            textAlign: TextAlign.center,
                            style: TextStyle(
                              fontSize: 12,
                              color: Colors.white,
                              fontWeight: FontWeight.w400,
                            ),
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
        ),
      ),
    );
  }

  // Yükleme ekranı için dummy kart
  Widget _buildDummyCard({
    required bool isDarkMode,
    required String title,
    required bool isFullWidth,
  }) {
    return Card(
      elevation: 2,
      color: AppTheme.primaryColor.withOpacity(0.7),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(16),
      ),
      child: Padding(
        padding: isFullWidth 
          ? const EdgeInsets.symmetric(horizontal: 20, vertical: 16)
          : const EdgeInsets.symmetric(horizontal: 12, vertical: 12),
        child: isFullWidth
            ? Row(
                children: [
                  // İkon kısmı
                  Container(
                    padding: const EdgeInsets.all(12),
                    decoration: BoxDecoration(
                      color: Colors.white.withOpacity(0.2),
                      shape: BoxShape.circle,
                    ),
                    child: SizedBox(
                      width: 28,
                      height: 28,
                    ),
                  ),
                  
                  SizedBox(width: 16),
                  
                  // Metin ve değer kısmı
                  Expanded(
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Text(
                          title,
                          style: TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.w500,
                            color: Colors.white,
                          ),
                        ),
                        
                        SizedBox(
                          width: 24,
                          height: 24,
                          child: CircularProgressIndicator(
                            valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                            strokeWidth: 2.5,
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              )
            : Column(
                mainAxisAlignment: MainAxisAlignment.center,
                crossAxisAlignment: CrossAxisAlignment.center,
                children: [
                  SizedBox(
                    width: 24,
                    height: 24,
                    child: CircularProgressIndicator(
                      valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                      strokeWidth: 2.5,
                    ),
                  ),
                  
                  SizedBox(height: 8),
                  
                  // Başlık
                  Text(
                    title,
                    textAlign: TextAlign.center,
                    style: TextStyle(
                      fontSize: 12,
                      color: Colors.white,
                      fontWeight: FontWeight.w400,
                    ),
                  ),
                ],
              ),
      ),
    );
  }

  Widget _buildContactsScreen(bool isDarkMode, Color textColor, Color cardColor,
      Color textSecondaryColor) {
    // Tekrar eden kişileri ve numaraları izle
    final duplicateContactsAsync = ref.watch(duplicateContactsProvider);
    final duplicateNumbersAsync = ref.watch(duplicateNumbersProvider);

    return Column(
      children: [
        // Arama çubuğu
        Padding(
          padding: const EdgeInsets.all(16.0),
          child: TextField(
            controller: _searchController,
            style: TextStyle(color: textColor),
            decoration: InputDecoration(
              hintText: 'Kişi ara...',
              hintStyle: TextStyle(color: textSecondaryColor),
              prefixIcon: Icon(Icons.search, color: textSecondaryColor),
              filled: true,
              fillColor: cardColor,
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(12),
                borderSide: BorderSide.none,
              ),
            ),
          ),
        ),

        // Seçim bilgisi
        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16.0),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text(
                'Kişileri seçin',
                style: TextStyle(
                  color: textColor,
                  fontWeight: FontWeight.bold,
                ),
              ),
              Text(
                '${ref.watch(selectedContactsProvider).length} kişi seçildi',
                style: TextStyle(
                  color: textSecondaryColor,
                  fontSize: 12,
                ),
              ),
            ],
          ),
        ),

        // Kişiler listesi
        Expanded(
          child: _buildContactsList(isDarkMode, textColor, cardColor),
        ),

        // Tekrar eden kişiler ve numaralar gösterimi
        Container(
          margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
          padding: const EdgeInsets.all(12),
          decoration: BoxDecoration(
            color: cardColor,
            borderRadius: BorderRadius.circular(12),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.05),
                blurRadius: 5,
                offset: const Offset(0, 2),
              ),
            ],
          ),
          child: Row(
            children: [
              // Tekrar eden kişiler butonu
              Expanded(
                child: duplicateContactsAsync.when(
                  data: (duplicateGroups) => InkWell(
                    onTap: () =>
                        _showDuplicatesDialog(context, duplicateGroups, true),
                    child: _buildStatItem(
                      context,
                      count: duplicateGroups.fold<int>(
                          0, (sum, group) => sum + group.length),
                      title: 'Tekrar Eden Kişi',
                      subtitle: '${duplicateGroups.length} grupta',
                      icon: Icons.person_search,
                      color: AppTheme.primaryColor,
                      isDarkMode: isDarkMode,
                    ),
                  ),
                  loading: () => _buildStatItem(
                    context,
                    count: 0,
                    title: 'Tekrar Eden Kişi',
                    subtitle: 'Yükleniyor...',
                    icon: Icons.person_search,
                    color: Colors.grey,
                    isDarkMode: isDarkMode,
                  ),
                  error: (error, stack) => _buildStatItem(
                    context,
                    count: 0,
                    title: 'Tekrar Eden Kişi',
                    subtitle: 'Hata oluştu',
                    icon: Icons.person_search,
                    color: Colors.red,
                    isDarkMode: isDarkMode,
                  ),
                ),
              ),

              const SizedBox(width: 12),

              // Tekrar eden numaralar butonu
              Expanded(
                child: duplicateNumbersAsync.when(
                  data: (duplicateGroups) => InkWell(
                    onTap: () =>
                        _showDuplicatesDialog(context, duplicateGroups, false),
                    child: _buildStatItem(
                      context,
                      count: duplicateGroups.fold<int>(
                          0, (sum, group) => sum + group.length),
                      title: 'Tekrar Eden Numara',
                      subtitle: '${duplicateGroups.length} grupta',
                      icon: Icons.phone_callback,
                      color: Colors.teal,
                      isDarkMode: isDarkMode,
                    ),
                  ),
                  loading: () => _buildStatItem(
                    context,
                    count: 0,
                    title: 'Tekrar Eden Numara',
                    subtitle: 'Yükleniyor...',
                    icon: Icons.phone_callback,
                    color: Colors.grey,
                    isDarkMode: isDarkMode,
                  ),
                  error: (error, stack) => _buildStatItem(
                    context,
                    count: 0,
                    title: 'Tekrar Eden Numara',
                    subtitle: 'Hata oluştu',
                    icon: Icons.phone_callback,
                    color: Colors.red,
                    isDarkMode: isDarkMode,
                  ),
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildContactsList(bool isDarkMode, Color textColor, Color cardColor) {
    final selectedContacts = ref.watch(selectedContactsProvider);
    final allSelected = ref.watch(allContactsSelectedProvider);

    return ref.watch(contactsListProvider).when(
          data: (contacts) {
            // Arama filtresini uygula
            final filteredContacts = contacts.where((contact) {
              final searchText = _searchQuery.toLowerCase();
              final name =
                  '${contact.name.first} ${contact.name.last}'.toLowerCase();
              return name.contains(searchText);
            }).toList();

            if (filteredContacts.isEmpty) {
              return Center(
                child: Text(
                  context.l10n.contact_not_found,
                  style: TextStyle(
                    color: textColor,
                    fontSize: 16,
                  ),
                ),
              );
            }

            return ListView.builder(
              padding: const EdgeInsets.symmetric(horizontal: 16),
              itemCount: filteredContacts.length,
              itemBuilder: (context, index) {
                final contact = filteredContacts[index];
                final isSelected = selectedContacts.contains(contact.id);

                // Yeni modern tasarım
                return Container(
                  margin: EdgeInsets.symmetric(vertical: 4),
                  decoration: BoxDecoration(
                    color: isSelected
                        ? AppTheme.primaryColor.withOpacity(0.1)
                        : isDarkMode
                            ? Color(0xFF222222)
                            : Colors.white,
                    borderRadius: BorderRadius.circular(12),
                    border: Border.all(
                      color: isSelected
                          ? AppTheme.primaryColor
                          : isDarkMode
                              ? Colors.white12
                              : Colors.grey.shade200,
                      width: isSelected ? 1.5 : 1.0,
                    ),
                    boxShadow: isSelected
                        ? [
                            BoxShadow(
                              color: AppTheme.primaryColor.withOpacity(0.2),
                              blurRadius: 8,
                              offset: Offset(0, 2),
                            )
                          ]
                        : null,
                  ),
                  child: InkWell(
                    borderRadius: BorderRadius.circular(12),
                    onTap: () {
                      final selectedIds = Set<String>.from(selectedContacts);
                      if (isSelected) {
                        selectedIds.remove(contact.id);
                      } else {
                        selectedIds.add(contact.id);
                      }
                      ref.read(selectedContactsProvider.notifier).state =
                          selectedIds;

                      // Tüm kişiler seçili mi kontrolü
                      ref.read(allContactsSelectedProvider.notifier).state =
                          selectedIds.length == contacts.length;
                    },
                    child: Padding(
                      padding: const EdgeInsets.all(12.0),
                      child: Row(
                        children: [
                          // Avatar
                          Container(
                            width: 50,
                            height: 50,
                            decoration: BoxDecoration(
                              shape: BoxShape.circle,
                              color: AppTheme.primaryColor.withOpacity(0.1),
                            ),
                            child: Center(
                              child: Text(
                                _getInitials(contact),
                                style: TextStyle(
                                  color: AppTheme.primaryColor,
                                  fontWeight: FontWeight.bold,
                                  fontSize: 18,
                                ),
                              ),
                            ),
                          ),
                          SizedBox(width: 12),

                          // Kişi bilgileri
                          Expanded(
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text(
                                  _getDisplayName(contact),
                                  style: TextStyle(
                                    fontWeight: FontWeight.bold,
                                    fontSize: 16,
                                    color: isDarkMode
                                        ? Colors.white
                                        : Colors.black87,
                                  ),
                                ),
                                if (contact.phones.isNotEmpty) ...[
                                  SizedBox(height: 4),
                                  Text(
                                    contact.phones.first.number,
                                    style: TextStyle(
                                      color: isDarkMode
                                          ? Colors.white70
                                          : Colors.black54,
                                      fontSize: 14,
                                    ),
                                  ),
                                ],
                                if (contact.emails.isNotEmpty) ...[
                                  SizedBox(height: 2),
                                  Text(
                                    contact.emails.first.address,
                                    style: TextStyle(
                                      color: isDarkMode
                                          ? Colors.white54
                                          : Colors.black45,
                                      fontSize: 12,
                                    ),
                                  ),
                                ],
                              ],
                            ),
                          ),

                          // Seçim işareti
                          Container(
                            width: 24,
                            height: 24,
                            decoration: BoxDecoration(
                              shape: BoxShape.circle,
                              color: isSelected
                                  ? AppTheme.primaryColor
                                  : Colors.transparent,
                              border: Border.all(
                                color: isSelected
                                    ? AppTheme.primaryColor
                                    : isDarkMode
                                        ? Colors.white54
                                        : Colors.grey,
                              ),
                            ),
                            child: isSelected
                                ? Icon(
                                    Icons.check,
                                    color: Colors.white,
                                    size: 16,
                                  )
                                : null,
                          ),
                        ],
                      ),
                    ),
                  ),
                );
              },
            );
          },
          loading: () => const Center(child: CircularProgressIndicator()),
          error: (error, stack) => Center(
            child: Text(
              'Hata: $error',
              style: TextStyle(color: textColor),
            ),
          ),
        );
  }

  String _getInitials(Contact contact) {
    if (contact.name.first.isEmpty && contact.name.last.isEmpty) {
      return '?';
    }
    final firstInitial = contact.name.first.isNotEmpty
        ? contact.name.first[0].toUpperCase()
        : '';
    final lastInitial =
        contact.name.last.isNotEmpty ? contact.name.last[0].toUpperCase() : '';
    return '$firstInitial$lastInitial';
  }

  String _getDisplayName(Contact contact) {
    if (contact.name.first.isEmpty && contact.name.last.isEmpty) {
      return contact.phones.isNotEmpty
          ? contact.phones.first.number
          : 'İsimsiz Kişi';
    }
    return '${contact.name.first} ${contact.name.last}'.trim();
  }

  // İstatistik kartı widget'ı
  Widget _buildStatisticsCard(
    bool isDarkMode,
    Color textColor,
    Color cardColor, {
    required String title,
    required IconData icon,
    required Widget child,
  }) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: cardColor,
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 10,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(icon, color: AppTheme.primaryColor),
              const SizedBox(width: 12),
              Text(
                title,
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: textColor,
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          child,
        ],
      ),
    );
  }

  Widget _buildBottomNavigationBar(bool isDarkMode) {
    return BottomNavigationBar(
      currentIndex: _selectedIndex,
      onTap: _onItemTapped,
      backgroundColor: isDarkMode ? AppTheme.darkCardColor : Colors.white,
      selectedItemColor: AppTheme.primaryColor,
      unselectedItemColor: isDarkMode
          ? AppTheme.darkTextSecondaryColor
          : AppTheme.lightTextSecondaryColor,
      items: const [
        BottomNavigationBarItem(
          icon: Icon(Icons.home),
          label: 'Ana Sayfa',
        ),
        BottomNavigationBarItem(
          icon: Icon(Icons.people),
          label: 'Kişilerim',
        ),
        BottomNavigationBarItem(
          icon: Icon(Icons.settings),
          label: 'Ayarlar',
        ),
      ],
    );
  }

  Widget _buildPremiumButton(BuildContext context) {
    final isDarkMode = Theme.of(context).brightness == Brightness.dark;
    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      width: double.infinity,
      child: InkWell(
        onTap: () => Navigator.pushNamed(context, '/premium'),
        child: Container(
          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 16),
          decoration: BoxDecoration(
            color: AppTheme.primaryColor.withOpacity(0.2),
            borderRadius: BorderRadius.circular(12),
            border: Border.all(color: AppTheme.primaryColor),
          ),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(
                Icons.workspace_premium,
                color: AppTheme.primaryColor,
                size: 24,
              ),
              const SizedBox(width: 10),
              Text(
                context.l10n.premium_button,
                style: TextStyle(
                  color: AppTheme.primaryColor,
                  fontSize: 18,
                  fontWeight: FontWeight.w600,
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildFilterChip({required String label, required Color color}) {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
      decoration: BoxDecoration(
        color: AppTheme.primaryColor.withOpacity(0.1),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: AppTheme.primaryColor.withOpacity(0.3)),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(
            Icons.filter_alt_outlined,
            size: 12,
            color: AppTheme.primaryColor,
          ),
          const SizedBox(width: 4),
          Text(
            label,
            style: TextStyle(
              fontSize: 12,
              color: AppTheme.primaryColor,
              fontWeight: FontWeight.w500,
            ),
          ),
        ],
      ),
    );
  }

  void _showFilteringOptions(
      BuildContext context, bool isDarkMode, Color textColor) {
    final includeContactsWithoutNumber =
        ref.read(includeContactsWithoutNumberProvider);
    final includeNumbersWithoutName =
        ref.read(includeNumbersWithoutNameProvider);

    showDialog(
      context: context,
      builder: (context) => Dialog(
        insetPadding: EdgeInsets.symmetric(horizontal: 20, vertical: 24),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(20),
        ),
        child: Container(
          width: double.infinity,
          decoration: BoxDecoration(
            color: isDarkMode
                ? Color(0xFF222222) // Koyu temada biraz daha açık ton
                : Color(0xFFFFF3F8), // Açık temada daha açık pembe tonu
            borderRadius: BorderRadius.circular(20),
            border: Border.all(
              color: isDarkMode
                  ? Colors.white
                      .withOpacity(0.1) // Koyu temada hafif beyaz çizgi
                  : Color(0xFFFFD6E7), // Açık temada pembe çizgi
              width: 1.0,
            ),
          ),
          padding: EdgeInsets.all(16),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Padding(
                padding: const EdgeInsets.only(bottom: 16.0, left: 8.0),
                child: Text(
                  'Rehber Filtreleme',
                  style: TextStyle(
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                    color: isDarkMode ? Colors.white : Colors.black,
                  ),
                ),
              ),
              Divider(
                  height: 1,
                  color: isDarkMode ? Colors.white24 : Colors.grey.shade300),
              const SizedBox(height: 16),

              // Numarası olmayan kişileri dahil etme
              StatefulBuilder(
                builder: (context, setState) => SwitchListTile(
                  contentPadding: EdgeInsets.symmetric(horizontal: 8),
                  title: Text(
                    'Numarası olmayan kişileri dahil et',
                    style: TextStyle(
                      fontSize: 16,
                      color: isDarkMode ? Colors.white : Colors.black,
                      fontWeight: FontWeight.w500,
                    ),
                  ),
                  subtitle: Text(
                    'Telefon numarası olmayan kişileri yedeklemeye dahil et',
                    style: TextStyle(
                      fontSize: 14,
                      color: isDarkMode ? Colors.white70 : Colors.black54,
                    ),
                  ),
                  value: ref.read(includeContactsWithoutNumberProvider),
                  onChanged: (value) async {
                    ref
                        .read(includeContactsWithoutNumberProvider.notifier)
                        .state = value;

                    // Değişikliği kaydet
                    final prefs = await SharedPreferences.getInstance();
                    await prefs.setBool(
                        'include_contacts_without_number', value);

                    setState(() {});
                  },
                  activeColor: AppTheme.primaryColor,
                ),
              ),

              Divider(
                  height: 1,
                  color: isDarkMode ? Colors.white24 : Colors.grey.shade300),

              // İsmi olmayan numaraları dahil etme
              StatefulBuilder(
                builder: (context, setState) => SwitchListTile(
                  contentPadding: EdgeInsets.symmetric(horizontal: 8),
                  title: Text(
                    'İsmi olmayan numaraları dahil et',
                    style: TextStyle(
                      fontSize: 16,
                      color: isDarkMode ? Colors.white : Colors.black,
                      fontWeight: FontWeight.w500,
                    ),
                  ),
                  subtitle: Text(
                    'İsim bilgisi olmayan telefon numaralarını yedeklemeye dahil et',
                    style: TextStyle(
                      fontSize: 14,
                      color: isDarkMode ? Colors.white70 : Colors.black54,
                    ),
                  ),
                  value: ref.read(includeNumbersWithoutNameProvider),
                  onChanged: (value) async {
                    ref.read(includeNumbersWithoutNameProvider.notifier).state =
                        value;

                    // Değişikliği kaydet
                    final prefs = await SharedPreferences.getInstance();
                    await prefs.setBool('include_numbers_without_name', value);

                    setState(() {});
                  },
                  activeColor: AppTheme.primaryColor,
                ),
              ),

              Divider(
                  height: 1,
                  color: isDarkMode ? Colors.white24 : Colors.grey.shade300),
              const SizedBox(height: 16),

              // Tamam butonu
              Align(
                alignment: Alignment.centerRight,
                child: TextButton(
                  onPressed: () => Navigator.pop(context),
                  child: Text(
                    'Tamam',
                    style: TextStyle(
                      color: isDarkMode ? Colors.white70 : Colors.black54,
                      fontSize: 16,
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  // Filtreleme ayarlarını yükleme fonksiyonu
  Future<void> _loadFilterSettings() async {
    final prefs = await SharedPreferences.getInstance();
    final includeContactsWithoutNumber =
        prefs.getBool('include_contacts_without_number');
    final includeNumbersWithoutName =
        prefs.getBool('include_numbers_without_name');

    if (includeContactsWithoutNumber != null) {
      ref.read(includeContactsWithoutNumberProvider.notifier).state =
          includeContactsWithoutNumber;
    }

    if (includeNumbersWithoutName != null) {
      ref.read(includeNumbersWithoutNameProvider.notifier).state =
          includeNumbersWithoutName;
    }
  }

  // İşlem seçenekleri sheet'i göster
  void _showOptionsSheet(BuildContext context) {
    final isDarkMode = Theme.of(context).brightness == Brightness.dark;

    showModalBottomSheet(
      context: context,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      builder: (context) {
        return Container(
          padding: const EdgeInsets.symmetric(vertical: 20),
          child: Wrap(
            children: [
              ListTile(
                leading: Container(
                  padding: const EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    color: AppTheme.primaryColor.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(10),
                  ),
                  child: Icon(
                    Icons.backup,
                    color: AppTheme.primaryColor,
                  ),
                ),
                title: const Text('Kişileri Yedekle'),
                subtitle: const Text('Seçtiğiniz kişileri yedekleyin'),
                onTap: () {
                  Navigator.pop(context);
                  Navigator.pushNamed(context, '/export');
                },
              ),
              ListTile(
                leading: Container(
                  padding: const EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    color: AppTheme.secondaryColor.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(10),
                  ),
                  child: Icon(
                    Icons.restore,
                    color: AppTheme.secondaryColor,
                  ),
                ),
                title: const Text('Kişileri Geri Yükle'),
                subtitle: const Text('Yedeklediğiniz kişileri geri yükleyin'),
                onTap: () {
                  Navigator.pop(context);
                  Navigator.pushNamed(context, '/backup_files');
                },
              ),
              ListTile(
                leading: Container(
                  padding: const EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    color: Colors.orange.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(10),
                  ),
                  child: const Icon(
                    Icons.file_download,
                    color: Colors.orange,
                  ),
                ),
                title: const Text('Kişileri İçe Aktar'),
                subtitle: const Text('Dosyadan kişileri içe aktarın'),
                onTap: () {
                  Navigator.pop(context);
                  Navigator.pushNamed(context, '/import');
                },
              ),
            ],
          ),
        );
      },
    );
  }

  // Tekrar eden kişileri ve numaraları gösterme dialogu
  void _showDuplicatesDialog(BuildContext context,
      List<List<Contact>> duplicateGroups, bool isNameDuplicate) {
    final isDarkMode = Theme.of(context).brightness == Brightness.dark;

    // Değer atama sorunu yaşanmaması için mevcut seçimleri önce temizleyelim
    ref.read(selectedDuplicatesProvider.notifier).state = {};

    showDialog(
      context: context,
      builder: (context) =>
          StatefulBuilder(builder: (dialogContext, dialogSetState) {
        return Dialog(
          insetPadding: EdgeInsets.symmetric(horizontal: 10, vertical: 10),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(20),
          ),
          child: Container(
            width: double.infinity,
            constraints: BoxConstraints(
              maxHeight: MediaQuery.of(context).size.height * 0.9,
              maxWidth: MediaQuery.of(context).size.width * 0.95,
            ),
            decoration: BoxDecoration(
              color: isDarkMode ? Color(0xFF222222) : Color(0xFFFFF3F8),
              borderRadius: BorderRadius.circular(20),
              border: Border.all(
                color: isDarkMode
                    ? Colors.white.withOpacity(0.1)
                    : Color(0xFFFFD6E7),
                width: 1.0,
              ),
            ),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                // Dialog başlığı
                Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: Row(
                    children: [
                      Expanded(
                        child: Text(
                          isNameDuplicate
                              ? 'Tekrar Eden Kişiler'
                              : 'Tekrar Eden Numaralar',
                          style: TextStyle(
                            fontSize: 20,
                            fontWeight: FontWeight.bold,
                            color: isDarkMode ? Colors.white : Colors.black,
                          ),
                        ),
                      ),
                      // Tümünü seç butonu eklendi
                      TextButton.icon(
                        onPressed: () {
                          final selectedIds = Set<String>.from(
                              ref.read(selectedDuplicatesProvider));

                          if (_getSelectedCount(duplicateGroups) <
                              _getTotalCount(duplicateGroups) / 2) {
                            // Yarıdan azı seçiliyse, tümünü seç
                            for (final group in duplicateGroups) {
                              for (final contact in group) {
                                selectedIds.add(contact.id);
                              }
                            }
                          } else {
                            // Yarıdan fazlası veya hepsi seçiliyse, tümünü temizle
                            selectedIds.clear();
                          }

                          ref.read(selectedDuplicatesProvider.notifier).state =
                              selectedIds;
                          dialogSetState(() {}); // Dialog UI'ı yenile
                        },
                        icon: Icon(
                          _getSelectedCount(duplicateGroups) <
                                  _getTotalCount(duplicateGroups) / 2
                              ? Icons.select_all
                              : Icons.clear_all,
                          color: isDarkMode ? Colors.white70 : Colors.black54,
                          size: 18,
                        ),
                        label: Text(
                          _getSelectedCount(duplicateGroups) <
                                  _getTotalCount(duplicateGroups) / 2
                              ? 'Tümünü Seç'
                              : 'Temizle',
                          style: TextStyle(
                            color: isDarkMode ? Colors.white70 : Colors.black54,
                            fontSize: 14,
                          ),
                        ),
                      ),
                      IconButton(
                        icon: Icon(
                          Icons.close,
                          color: isDarkMode ? Colors.white70 : Colors.black54,
                        ),
                        onPressed: () => Navigator.pop(context),
                      ),
                    ],
                  ),
                ),
                Divider(height: 1),

                // Açıklama metni
                Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: Text(
                    isNameDuplicate
                        ? 'Aynı isme sahip kişiler listeleniyor. Birleştirmek istediğiniz kişileri seçip "Birleştir" butonuna tıklayabilirsiniz.'
                        : 'Aynı telefon numarasına sahip kişiler listeleniyor. Birleştirmek istediğiniz kişileri seçip "Birleştir" butonuna tıklayabilirsiniz.',
                    style: TextStyle(
                      fontSize: 14,
                      color: isDarkMode ? Colors.white70 : Colors.black54,
                    ),
                  ),
                ),

                // Seçili kişi sayısı bilgisi
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 16.0),
                  child: Row(
                    children: [
                      Container(
                        padding:
                            EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                        decoration: BoxDecoration(
                          color: AppTheme.primaryColor.withOpacity(0.1),
                          borderRadius: BorderRadius.circular(20),
                        ),
                        child: Text(
                          '${_getSelectedCount(duplicateGroups)} / ${_getTotalCount(duplicateGroups)} kişi seçildi',
                          style: TextStyle(
                            color: AppTheme.primaryColor,
                            fontWeight: FontWeight.bold,
                            fontSize: 14,
                          ),
                        ),
                      ),
                    ],
                  ),
                ),

                SizedBox(height: 8),

                // Grup listesi
                Expanded(
                  child: duplicateGroups.isEmpty
                      ? Center(
                          child: Text(
                            'Tekrar eden ${isNameDuplicate ? 'kişi' : 'numara'} bulunamadı',
                            style: TextStyle(
                              color: isDarkMode ? Colors.white : Colors.black,
                            ),
                          ),
                        )
                      : ListView.builder(
                          itemCount: duplicateGroups.length,
                          itemBuilder: (context, groupIndex) {
                            final group = duplicateGroups[groupIndex];
                            return _buildDuplicateGroupItem(
                              dialogContext,
                              group,
                              isNameDuplicate,
                              groupIndex,
                              isDarkMode,
                              dialogSetState,
                            );
                          },
                        ),
                ),

                // Birleştir butonu
                Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: ElevatedButton(
                    style: ElevatedButton.styleFrom(
                      backgroundColor: AppTheme.primaryColor,
                      foregroundColor: Colors.white,
                      minimumSize: Size(double.infinity, 48),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                    ),
                    onPressed: _getSelectedCount(duplicateGroups) >= 2
                        ? () {
                            // Burada birleştirme işlemi yapılacak
                            Navigator.pop(context);
                            _showMergeConfirmationDialog(
                                context, isNameDuplicate);
                          }
                        : null, // 2'den az seçim varsa butonu devre dışı bırak
                    child: Text(
                        'Seçili Kişileri Birleştir (${_getSelectedCount(duplicateGroups)})'),
                  ),
                ),
              ],
            ),
          ),
        );
      }),
    );
  }

  // Toplam kişi sayısını hesapla
  int _getTotalCount(List<List<Contact>> groups) {
    int total = 0;
    for (final group in groups) {
      total += group.length;
    }
    return total;
  }

  // Seçili kişi sayısını hesapla
  int _getSelectedCount(List<List<Contact>> groups) {
    final selectedIds = ref.read(selectedDuplicatesProvider);
    int count = 0;

    for (final group in groups) {
      for (final contact in group) {
        if (selectedIds.contains(contact.id)) {
          count++;
        }
      }
    }

    return count;
  }

  // Tekrar eden grup öğeleri
  Widget _buildDuplicateGroupItem(
    BuildContext context,
    List<Contact> group,
    bool isNameDuplicate,
    int groupIndex,
    bool isDarkMode,
    StateSetter setState,
  ) {
    return Card(
      margin: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      elevation: 0,
      color: isDarkMode ? Color(0xFF333333) : Colors.white,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
        side: BorderSide(
          color: isDarkMode ? Colors.white24 : Colors.grey.shade200,
          width: 1,
        ),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Grup başlık - tüm grubu seçme/kaldırma
          InkWell(
            onTap: () {
              // Tüm grup için seçim/kaldırma
              final selectedIds =
                  Set<String>.from(ref.read(selectedDuplicatesProvider));
              bool allSelected =
                  group.every((contact) => selectedIds.contains(contact.id));

              if (allSelected) {
                // Hepsi seçiliyse, seçimi kaldır
                for (final contact in group) {
                  selectedIds.remove(contact.id);
                }
              } else {
                // Hepsi seçili değilse, tümünü seç
                for (final contact in group) {
                  selectedIds.add(contact.id);
                }
              }

              ref.read(selectedDuplicatesProvider.notifier).state = selectedIds;
              setState(() {}); // UI'ı yenile
            },
            child: Padding(
              padding: const EdgeInsets.all(12.0),
              child: Row(
                children: [
                  Icon(
                    isNameDuplicate
                        ? Icons.person_search
                        : Icons.phone_callback,
                    color: AppTheme.primaryColor,
                    size: 20,
                  ),
                  SizedBox(width: 8),
                  Expanded(
                    child: Text(
                      isNameDuplicate
                          ? '${group.first.name.first} ${group.first.name.last}'
                          : (group.first.phones.isNotEmpty
                              ? group.first.phones.first.number
                              : 'Bilinmeyen numara'),
                      style: TextStyle(
                        fontWeight: FontWeight.bold,
                        color: isDarkMode ? Colors.white : Colors.black,
                      ),
                    ),
                  ),
                  Text(
                    '${group.length} kişi',
                    style: TextStyle(
                      fontSize: 12,
                      color: isDarkMode ? Colors.white70 : Colors.black54,
                    ),
                  ),
                  SizedBox(width: 8),
                  // Grup seçim durumu
                  Container(
                    width: 20,
                    height: 20,
                    decoration: BoxDecoration(
                      shape: BoxShape.circle,
                      border: Border.all(
                        color: AppTheme.primaryColor.withOpacity(0.6),
                      ),
                      color: _isGroupAllSelected(group)
                          ? AppTheme.primaryColor
                          : (_isGroupPartiallySelected(group)
                              ? AppTheme.primaryColor.withOpacity(0.3)
                              : Colors.transparent),
                    ),
                    child: _isGroupAllSelected(group)
                        ? Icon(
                            Icons.check,
                            color: Colors.white,
                            size: 14,
                          )
                        : null,
                  ),
                ],
              ),
            ),
          ),
          Divider(height: 1),

          // Kişiler listesi
          ...group.map((contact) => Padding(
                padding: const EdgeInsets.symmetric(vertical: 2.0),
                child: Material(
                  color: Colors.transparent,
                  child: _buildDuplicateContactItem(
                    context,
                    contact,
                    isDarkMode,
                    isNameDuplicate,
                    setState,
                  ),
                ),
              )),
        ],
      ),
    );
  }

  // Grubun tamamen seçili olup olmadığını kontrol et
  bool _isGroupAllSelected(List<Contact> group) {
    final selectedIds = ref.read(selectedDuplicatesProvider);
    return group.every((contact) => selectedIds.contains(contact.id));
  }

  // Grubun kısmen seçili olup olmadığını kontrol et
  bool _isGroupPartiallySelected(List<Contact> group) {
    final selectedIds = ref.read(selectedDuplicatesProvider);
    return group.any((contact) => selectedIds.contains(contact.id)) &&
        !group.every((contact) => selectedIds.contains(contact.id));
  }

  // Tekrar eden kişi öğesi
  Widget _buildDuplicateContactItem(
    BuildContext context,
    Contact contact,
    bool isDarkMode,
    bool isNameDuplicate,
    StateSetter setState,
  ) {
    final selectedDuplicates = ref.watch(selectedDuplicatesProvider);
    final isSelected = selectedDuplicates.contains(contact.id);

    return InkWell(
      onTap: () {
        final selectedIds = Set<String>.from(selectedDuplicates);
        if (isSelected) {
          selectedIds.remove(contact.id);
        } else {
          selectedIds.add(contact.id);
        }
        ref.read(selectedDuplicatesProvider.notifier).state = selectedIds;
        setState(() {}); // UI'ı yenile
      },
      borderRadius: BorderRadius.circular(8),
      child: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
        child: Row(
          children: [
            // Seçim işareti
            GestureDetector(
              onTap: () {
                final selectedIds = Set<String>.from(selectedDuplicates);
                if (isSelected) {
                  selectedIds.remove(contact.id);
                } else {
                  selectedIds.add(contact.id);
                }
                ref.read(selectedDuplicatesProvider.notifier).state =
                    selectedIds;
                setState(() {}); // UI'ı yenile
              },
              child: Container(
                width: 24,
                height: 24,
                decoration: BoxDecoration(
                  shape: BoxShape.circle,
                  color:
                      isSelected ? AppTheme.primaryColor : Colors.transparent,
                  border: Border.all(
                    color: isSelected
                        ? AppTheme.primaryColor
                        : isDarkMode
                            ? Colors.white54
                            : Colors.grey,
                  ),
                ),
                child: isSelected
                    ? Icon(
                        Icons.check,
                        color: Colors.white,
                        size: 16,
                      )
                    : null,
              ),
            ),
            SizedBox(width: 12),

            // Avatar
            CircleAvatar(
              backgroundColor: AppTheme.primaryColor.withOpacity(0.1),
              radius: 18,
              child: Text(
                _getInitials(contact),
                style: TextStyle(
                  color: AppTheme.primaryColor,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
            SizedBox(width: 12),

            // Kişi bilgileri
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    _getDisplayName(contact),
                    style: TextStyle(
                      fontWeight: FontWeight.w500,
                      color: isDarkMode ? Colors.white : Colors.black,
                    ),
                  ),
                  if (contact.phones.isNotEmpty)
                    Text(
                      contact.phones.first.number,
                      style: TextStyle(
                        fontSize: 12,
                        color: isDarkMode ? Colors.white70 : Colors.black54,
                      ),
                    ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  // Birleştirme onay dialogu
  void _showMergeConfirmationDialog(
      BuildContext context, bool isNameDuplicate) {
    final isDarkMode = Theme.of(context).brightness == Brightness.dark;
    final selectedIds = ref.read(selectedDuplicatesProvider);
    final selectedCount = selectedIds.length;

    if (selectedCount < 2) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Birleştirmek için en az 2 kişi seçmelisiniz'),
          backgroundColor: Colors.red,
        ),
      );
      return;
    }

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: isDarkMode ? Color(0xFF222222) : Colors.white,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(20),
        ),
        title: Text(
          'Kişileri Birleştir',
          style: TextStyle(
            color: isDarkMode ? Colors.white : Colors.black,
          ),
        ),
        content: Text(
          'Seçtiğiniz $selectedCount kişi birleştirilecek. Bu işlem geri alınamaz. Devam etmek istiyor musunuz?\n\nNot: Bazı telefonlarda (özellikle Xiaomi, Huawei gibi) güvenlik kısıtlamaları nedeniyle bu işlem çalışmayabilir.',
          style: TextStyle(
            color: isDarkMode ? Colors.white70 : Colors.black87,
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text(
              'İptal',
              style: TextStyle(
                color: isDarkMode ? Colors.white70 : Colors.black54,
              ),
            ),
          ),
          ElevatedButton(
            style: ElevatedButton.styleFrom(
              backgroundColor: AppTheme.primaryColor,
              foregroundColor: Colors.white,
            ),
            onPressed: () async {
              Navigator.pop(context);

              // Birleştirme işlemi için yeni bir yaklaşım deneyelim
              try {
                // Önce seçili kişileri alalım
                final contactsManager = ContactsManager();
                List<Contact> selectedContacts = [];
                final contactsList = await contactsManager.getAllContacts();

                for (final contact in contactsList) {
                  if (selectedIds.contains(contact.id)) {
                    selectedContacts.add(contact);
                  }
                }

                if (selectedContacts.length < 2) {
                  throw Exception('Birleştirmek için yeterli kişi seçilmedi');
                }

                // İlk kişiyi ana kişi olarak belirle
                final mainContact = selectedContacts.first;

                // Birleştirme işlemi için ana kişinin bilgilerini göster
                _showMergeInstructionsDialog(
                    context, mainContact, selectedContacts);

                // UI'ı güncelle
                ref.refresh(contactsCountProvider);
                ref.refresh(contactsListProvider);
                ref.refresh(filteredContactsCountProvider);

                if (isNameDuplicate) {
                  ref.refresh(duplicateContactsProvider);
                } else {
                  ref.refresh(duplicateNumbersProvider);
                }

                // Birleştirme sonrası seçili liste temizlenir
                ref.read(selectedDuplicatesProvider.notifier).state = {};
              } catch (e) {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content:
                        Text('Birleştirme hazırlığı sırasında hata oluştu: $e'),
                    backgroundColor: Colors.red,
                  ),
                );
              }
            },
            child: Text('Birleştir'),
          ),
        ],
      ),
    );
  }

  // Birleştirme talimatları dialog'u
  void _showMergeInstructionsDialog(BuildContext context, Contact mainContact,
      List<Contact> allSelectedContacts) {
    final isDarkMode = Theme.of(context).brightness == Brightness.dark;

    // Birleştirilecek tüm kişilerin telefon numaralarını ve e-posta adreslerini toplayalım
    Set<String> allPhoneNumbers = {};
    Set<String> allEmails = {};

    for (final contact in allSelectedContacts) {
      for (final phone in contact.phones) {
        allPhoneNumbers.add(phone.number);
      }
      for (final email in contact.emails) {
        allEmails.add(email.address);
      }
    }

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: isDarkMode ? Color(0xFF222222) : Colors.white,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(20),
        ),
        title: Text(
          'Kişileri Manuel Birleştirme',
          style: TextStyle(
            color: isDarkMode ? Colors.white : Colors.black,
          ),
        ),
        content: SingleChildScrollView(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'Telefonunuzun güvenlik kısıtlamaları nedeniyle, kişileri otomatik olarak birleştiremiyoruz. Lütfen aşağıdaki bilgileri kullanarak telefonunuzun kendi kişiler uygulamasında manuel olarak birleştirme yapın:',
                style: TextStyle(
                  color: isDarkMode ? Colors.white70 : Colors.black87,
                ),
              ),
              SizedBox(height: 16),
              Text(
                'Ana Kişi: ${mainContact.name.first} ${mainContact.name.last}',
                style: TextStyle(
                  fontWeight: FontWeight.bold,
                  color: isDarkMode ? Colors.white : Colors.black,
                ),
              ),
              SizedBox(height: 8),
              Text(
                'Tüm Telefon Numaraları:',
                style: TextStyle(
                  fontWeight: FontWeight.bold,
                  color: isDarkMode ? Colors.white : Colors.black,
                ),
              ),
              ...allPhoneNumbers.map((number) => Padding(
                    padding: const EdgeInsets.only(left: 8.0, top: 4.0),
                    child: Text(
                      number,
                      style: TextStyle(
                        color: isDarkMode ? Colors.white70 : Colors.black87,
                      ),
                    ),
                  )),
              if (allEmails.isNotEmpty) ...[
                SizedBox(height: 8),
                Text(
                  'Tüm E-posta Adresleri:',
                  style: TextStyle(
                    fontWeight: FontWeight.bold,
                    color: isDarkMode ? Colors.white : Colors.black,
                  ),
                ),
                ...allEmails.map((email) => Padding(
                      padding: const EdgeInsets.only(left: 8.0, top: 4.0),
                      child: Text(
                        email,
                        style: TextStyle(
                          color: isDarkMode ? Colors.white70 : Colors.black87,
                        ),
                      ),
                    )),
              ],
              SizedBox(height: 16),
              Text(
                'Talimatlar:',
                style: TextStyle(
                  fontWeight: FontWeight.bold,
                  color: isDarkMode ? Colors.white : Colors.black,
                ),
              ),
              Padding(
                padding: const EdgeInsets.only(left: 8.0, top: 4.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      '1. Telefonunuzun kişiler uygulamasını açın',
                      style: TextStyle(
                        color: isDarkMode ? Colors.white70 : Colors.black87,
                      ),
                    ),
                    Text(
                      '2. Ana kişiyi düzenleyin (${mainContact.name.first} ${mainContact.name.last})',
                      style: TextStyle(
                        color: isDarkMode ? Colors.white70 : Colors.black87,
                      ),
                    ),
                    Text(
                      '3. Tüm telefon numaralarını ve e-posta adreslerini ekleyin',
                      style: TextStyle(
                        color: isDarkMode ? Colors.white70 : Colors.black87,
                      ),
                    ),
                    Text(
                      '4. Kaydedin ve diğer kişileri manuel olarak silin',
                      style: TextStyle(
                        color: isDarkMode ? Colors.white70 : Colors.black87,
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text(
              'Anladım',
              style: TextStyle(
                color: AppTheme.primaryColor,
              ),
            ),
          ),
        ],
      ),
    );

    // Bildirim göster
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Kişiler için birleştirme bilgileri hazırlandı'),
        backgroundColor: Colors.green,
        duration: Duration(seconds: 3),
      ),
    );
  }

  // İstatistik öğesi için yardımcı metod
  Widget _buildStatItem(
    BuildContext context, {
    required int count,
    required String title,
    required String subtitle,
    required IconData icon,
    required Color color,
    required bool isDarkMode,
  }) {
    return Container(
      padding: EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: isDarkMode ? Color(0xFF333333) : Colors.white,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(
          color: isDarkMode ? Colors.white24 : Colors.grey.shade200,
        ),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Container(
                padding: EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: color.withOpacity(0.1),
                  shape: BoxShape.circle,
                ),
                child: Icon(
                  icon,
                  color: color,
                  size: 16,
                ),
              ),
              SizedBox(width: 8),
              Text(
                '$count',
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: isDarkMode ? Colors.white : Colors.black,
                ),
              ),
            ],
          ),
          SizedBox(height: 4),
          Text(
            title,
            style: TextStyle(
              fontSize: 14,
              fontWeight: FontWeight.w500,
              color: isDarkMode ? Colors.white : Colors.black,
            ),
          ),
          Text(
            subtitle,
            style: TextStyle(
              fontSize: 12,
              color: isDarkMode ? Colors.white70 : Colors.black54,
            ),
          ),
        ],
      ),
    );
  }

  // Dialog metodları
  void _showDuplicateNumbersDialog(BuildContext context, bool isDarkMode) {
    final duplicateNumbersAsync = ref.watch(duplicateNumbersProvider);

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Tekrarlanan Numaralar'),
        content: SizedBox(
          width: double.maxFinite,
          child: duplicateNumbersAsync.when(
            data: (duplicateGroups) {
              if (duplicateGroups.isEmpty) {
                return Text('Tekrarlanan numara bulunamadı');
              }

              return ListView.builder(
                shrinkWrap: true,
                itemCount: duplicateGroups.length,
                itemBuilder: (context, index) {
                  final groupContacts = duplicateGroups[index];
                  final contact =
                      groupContacts.first; // Her grup için ilk kişiyi göster
                  return ListTile(
                    title: Text('${contact.name.first} ${contact.name.last}'),
                    subtitle: Text(contact.phones.isNotEmpty
                        ? contact.phones.first.number
                        : 'Numara yok'),
                    leading: CircleAvatar(
                      child: Text(
                          '${contact.name.first.isNotEmpty ? contact.name.first[0] : '?'}'),
                    ),
                  );
                },
              );
            },
            loading: () => Center(child: CircularProgressIndicator()),
            error: (error, stack) => Text('Hata: $error'),
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('Kapat'),
          ),
          TextButton(
            onPressed: () {
              Navigator.pop(context);
              // Birleştirme talimatlarını göster
              _showMergeConfirmationDialog(context, false);
            },
            child: Text('Birleştir'),
          ),
        ],
      ),
    );
  }

  void _showDuplicateNamesDialog(BuildContext context, bool isDarkMode) {
    final duplicateNamesAsync = ref.watch(duplicateNamesProvider);

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Tekrarlanan İsimler'),
        content: SizedBox(
          width: double.maxFinite,
          child: duplicateNamesAsync.when(
            data: (contacts) {
              if (contacts.isEmpty) {
                return Text('Tekrarlanan isim bulunamadı');
              }

              return ListView.builder(
                shrinkWrap: true,
                itemCount: contacts.length,
                itemBuilder: (context, index) {
                  final contact = contacts[index];
                  return ListTile(
                    title: Text('${contact.name.first} ${contact.name.last}'),
                    subtitle: Text(contact.phones.isNotEmpty
                        ? contact.phones.first.number
                        : 'Numara yok'),
                    leading: CircleAvatar(
                      child: Text(
                          '${contact.name.first.isNotEmpty ? contact.name.first[0] : '?'}'),
                    ),
                  );
                },
              );
            },
            loading: () => Center(child: CircularProgressIndicator()),
            error: (error, stack) => Text('Hata: $error'),
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('Kapat'),
          ),
          TextButton(
            onPressed: () {
              Navigator.pop(context);
              // Birleştirme talimatlarını göster
              _showMergeConfirmationDialog(context, true);
            },
            child: Text('Birleştir'),
          ),
        ],
      ),
    );
  }

  void _showDuplicateEmailsDialog(BuildContext context, bool isDarkMode) {
    final duplicateEmailsAsync = ref.watch(duplicateEmailsProvider);

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Tekrarlanan E-postalar'),
        content: SizedBox(
          width: double.maxFinite,
          child: duplicateEmailsAsync.when(
            data: (contacts) {
              if (contacts.isEmpty) {
                return Text('Tekrarlanan e-posta bulunamadı');
              }

              return ListView.builder(
                shrinkWrap: true,
                itemCount: contacts.length,
                itemBuilder: (context, index) {
                  final contact = contacts[index];
                  return ListTile(
                    title: Text('${contact.name.first} ${contact.name.last}'),
                    subtitle: Text(contact.emails.isNotEmpty
                        ? contact.emails.first.address
                        : 'E-posta yok'),
                    leading: CircleAvatar(
                      child: Text(
                          '${contact.name.first.isNotEmpty ? contact.name.first[0] : '?'}'),
                    ),
                  );
                },
              );
            },
            loading: () => Center(child: CircularProgressIndicator()),
            error: (error, stack) => Text('Hata: $error'),
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('Kapat'),
          ),
          TextButton(
            onPressed: () {
              Navigator.pop(context);
              // Birleştirme talimatlarını göster
              _showMergeConfirmationDialog(context, true);
            },
            child: Text('Birleştir'),
          ),
        ],
      ),
    );
  }

  void _showMissingInfoDialog(BuildContext context, bool isDarkMode) {
    final missingInfoAsync = ref.watch(missingInfoContactsProvider);

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Eksik Bilgiye Sahip Kişiler'),
        content: SizedBox(
          width: double.maxFinite,
          child: missingInfoAsync.when(
            data: (contacts) {
              if (contacts.isEmpty) {
                return Text('Eksik bilgiye sahip kişi bulunamadı');
              }

              return ListView.builder(
                shrinkWrap: true,
                itemCount: contacts.length,
                itemBuilder: (context, index) {
                  final contact = contacts[index];
                  String missingInfo = '';

                  if (contact.displayName.isEmpty) {
                    missingInfo += 'İsim yok';
                  }

                  if (contact.phones.isEmpty) {
                    missingInfo += missingInfo.isNotEmpty
                        ? ', Telefon yok'
                        : 'Telefon yok';
                  }

                  if (contact.emails.isEmpty) {
                    missingInfo += missingInfo.isNotEmpty
                        ? ', E-posta yok'
                        : 'E-posta yok';
                  }

                  return ListTile(
                    title: Text(contact.displayName.isNotEmpty
                        ? contact.displayName
                        : 'İsimsiz Kişi'),
                    subtitle: Text(missingInfo),
                    leading: CircleAvatar(
                      child: Text(contact.displayName.isNotEmpty
                          ? contact.displayName[0]
                          : '?'),
                    ),
                  );
                },
              );
            },
            loading: () => Center(child: CircularProgressIndicator()),
            error: (error, stack) => Text('Hata: $error'),
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('Kapat'),
          ),
          TextButton(
            onPressed: () {
              Navigator.pop(context);
              // Düzenleme ekranını aç
              _editContact(context);
            },
            child: Text('Düzenle'),
          ),
        ],
      ),
    );
  }

  // Kişi düzenleme fonksiyonu
  void _editContact(BuildContext context) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
          content: Text('Kişi düzenleme sayfasına yönlendiriliyorsunuz...')),
    );
    // Burada kişi düzenleme ekranına yönlendirme yapabilirsiniz
  }
}

// Animasyonlu sayaç widget'ı
class AnimatedCounter extends StatefulWidget {
  final int count;
  final TextStyle style;
  final Duration duration;

  const AnimatedCounter({
    Key? key,
    required this.count,
    required this.style,
    this.duration = const Duration(seconds: 1),
  }) : super(key: key);

  @override
  State<AnimatedCounter> createState() => _AnimatedCounterState();
}

class _AnimatedCounterState extends State<AnimatedCounter>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<int> _animation;
  int _oldCount = 0;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      vsync: this,
      duration: widget.duration,
    );
    _animation = IntTween(begin: 0, end: widget.count).animate(
      CurvedAnimation(parent: _controller, curve: Curves.easeOut),
    );
    _controller.forward();
  }

  @override
  void didUpdateWidget(AnimatedCounter oldWidget) {
    super.didUpdateWidget(oldWidget);
    if (oldWidget.count != widget.count) {
      _oldCount = oldWidget.count;
      _animation = IntTween(begin: _oldCount, end: widget.count).animate(
        CurvedAnimation(parent: _controller, curve: Curves.easeOut),
      );
      _controller.reset();
      _controller.forward();
    }
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return AnimatedBuilder(
      animation: _animation,
      builder: (context, child) {
        return Text(
          '${_animation.value}',
          style: widget.style,
        );
      },
    );
  }
}
